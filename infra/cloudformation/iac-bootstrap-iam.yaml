---
AWSTemplateFormatVersion: 2010-09-09
Description: Create the supporting resources for Terraform Infrastructure state

Parameters:
  ServiceName:
    Description: Specifies the hosted service name. Used within component naming
    Type: String

  EnvironmentName:
    Description: Specifies the env in which the hosted service is deployed. Used within component naming
    Type: String
    AllowedValues: ['dev', 'prod', 'test', 'staging']

  TerraformStateBucketName:
    Description: Name of the s3 bucket to store the terraform state
    Type: String

  TerraformStateDynamoDBTableName:
    Description: Name of the DynamoDB used for terraform state locking
    Type: String

Resources:
  AssumeInfraBotRole:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'AssumeInfraBotRole-${ServiceName}-${EnvironmentName}'
      Description: !Sub 'Allow assuming the infra bot role which has relevant permissions to deploy resources ${ServiceName}'
      Path: /iac/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AssumeInfraBotRole
            Effect: Allow
            Action: 'sts:AssumeRole'
            Resource:
              - !GetAtt InfraBotRole.Arn
  
  InvokeModifySGLambda:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'InvokeModifySGLambda-${ServiceName}-${EnvironmentName}'
      Path: /iac/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
              - 'lambda:GetFunctionConfiguration'
            Resource: '*'
            Condition:
              StringEqualsIgnoreCase:
                'aws:ResourceTag/Env': !Sub ${EnvironmentName}
                'aws:ResourceTag/Purpose': modify-sg-on-demand

  AccessToCommonSecrets:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'AccessToCommonSecrets-${ServiceName}-${EnvironmentName}'
      Path: /iac/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - 'secretsmanager:GetRandomPassword'
              - 'secretsmanager:ListSecrets'
            Resource: '*'
          - Sid: VisualEditor1
            Effect: Allow
            Action:
              - 'secretsmanager:GetSecretValue'
              - 'secretsmanager:DescribeSecret'
              - 'secretsmanager:ListSecrets'
              - 'secretsmanager:ListSecretVersionIds'
            Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentName}/common/*'
          - Sid: VisualEditor2
            Effect: Allow
            Action: 'ssm:GetParameter'
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvironmentName}/common/*
            Condition:
              StringEqualsIgnoreCase:
                'aws:ResourceTag/Env': !Sub ${EnvironmentName}
                'aws:ResourceTag/Purpose': modify-sg-on-demand

  AccessToTerraformState:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: !Sub 'AccessToTerraformState-${ServiceName}-${EnvironmentName}'
      Path: /iac/
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Sid: DynamoDBAccess
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
            Resource: !Join ['', [!Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/', !Ref TerraformStateDynamoDBTableName]]
          - Sid: ListTfStateBucket
            Effect: Allow
            Action: s3:ListBucket
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'TerraformStateBucketName']]
          - Sid: TfStateBucketObjectsAccess
            Effect: Allow
            Action: 
              - s3:GetObjectRetention
              - s3:GetObjectVersionTagging
              - s3:GetObjectAttributes
              - s3:GetObjectLegalHold
              - s3:GetObjectVersionAttributes
              - s3:GetObjectVersionTorrent
              - s3:PutObject
              - s3:GetObjectAcl
              - s3:GetObject
              - s3:GetObjectTorrent
              - s3:GetObjectVersionAcl
              - s3:GetObjectTagging
              - s3:GetObjectVersionForReplication
              - s3:DeleteObject
              - s3:GetObjectVersion
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'TerraformStateBucketName', '/*']]
  
  ECRPermsForLambdasEnvs:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: !Sub 'AutomatedDeploymentECR-${ServiceName}-${EnvironmentName}'
      Path: /iac/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:PutLifecyclePolicy'
              - 'ecr:PutImageTagMutability'
              - 'ecr:ListTagsForResource'
              - 'ecr:UploadLayerPart'
              - 'ecr:DescribeImages'
              - 'ecr:ListImages'
              - 'ecr:DeleteLifecyclePolicy'
              - 'ecr:DeleteRepository'
              - 'ecr:PutImage'
              - 'ecr:UntagResource'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:TagResource'
              - 'ecr:DescribeRepositories'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:DeleteRepositoryPolicy'
              - 'ecr:GetLifecyclePolicy'
              - 'ecr:GetDownloadUrlForLayer'
            Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*'
          - Sid: VisualEditor1
            Effect: Allow
            Action: 'ecr:GetAuthorizationToken'
            Resource: '*'
          - Sid: VisualEditor2
            Effect: Allow
            Action:
              - 'ecr:GetRegistryPolicy'
              - 'ecr:CreateRepository'
              - 'ecr:DescribeRegistry'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:DeleteRegistryPolicy'
            Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*'

  PermsForDeployingLambdas:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: !Sub 'AutomatedDeploymentLambdas-${ServiceName}-${EnvironmentName}'
      Path: /iac/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - 'events:PutEvents'
              - 'events:TagResource'
              - 'events:DeleteRule'
              - 'events:PutTargets'
              - 'events:DescribeRule'
              - 'events:EnableRule'
              - 'events:PutRule'
              - 'events:ListTagsForResource'
              - 'events:RemoveTargets'
              - 'events:ListTargetsByRule'
              - 'events:UntagResource'
              - 'events:DisableRule'
            Resource:
              - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/*'
              - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*'
          - Sid: VisualEditor1
            Effect: Allow
            Action:
              - 'lambda:CreateFunction'
              - 'events:TagResource'
              - 'events:PutTargets'
              - 'ecr:SetRepositoryPolicy'
              - 'events:ListTagsForResource'
              - 'events:RemoveTargets'
              - 'events:ListTargetsByRule'
              - 'ecr:GetRepositoryPolicy'
              - 'events:UntagResource'
              - 'logs:ListTagsForResource'
              - 'logs:TagResource'
              - 'logs:UntagResource'
              - 'iam:TagPolicy'
              - 'iam:UntagPolicy'
            Resource:
              - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*'
              - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*'
              - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
              - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/*'
          - Sid: VisualEditor2
            Effect: Allow
            Action:
              - 'events:ListRuleNamesByTarget'
              - 'lambda:*'
              - 'events:ListRules'
            Resource: '*'
  
  PermsForAutomatedDeployment:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: !Sub 'AutomatedDeployment-${ServiceName}-${EnvironmentName}'
      Path: /iac/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - 'logs:ListTagsLogGroup'
              - 'logs:CreateLogStream'
              - 'secretsmanager:GetResourcePolicy'
              - 'logs:TagLogGroup'
              - 'logs:DescribeLogGroups'
              - 'logs:UntagLogGroup'
              - 'logs:DeleteLogGroup'
              - 'logs:DescribeLogStreams'
              - 'ec2:CreateVpc'
              - 'ec2:DeleteVpc'
              - 'logs:PutRetentionPolicy'
              - 'logs:CreateLogGroup'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
              - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/*'
          - Sid: VisualEditor1
            Effect: Allow
            Action:
              - 'ec2:CreateInternetGateway'
              - 'ec2:AttachInternetGateway'
              - 'ec2:ModifyVpcAttribute'
            Resource:
              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/*'
              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:internet-gateway/*'
          - Sid: VisualEditor2
            Effect: Allow
            Action:
              - 'ec2:AuthorizeSecurityGroupIngress'
              - 'rds:DescribeDBEngineVersions'
              - 'ec2:CreateKeyPair'
              - 'route53:GetHostedZone'
              - 'route53:CreateHostedZone'
              - 'route53:DeleteHostedZone'
              - 'route53:AssociateVPCWithHostedZone'
              - 'route53:DisassociateVPCFromHostedZone'
              - 'rds:DescribeEngineDefaultParameters'
              - 'ec2:DescribeVpcAttribute'
              - 'route53:ListHostedZonesByName'
              - 'route53:ListHostedZonesByVPC'
              - 'route53:GetDNSSEC'
              - 'route53:DisableHostedZoneDNSSEC'
              - 'route53:EnableHostedZoneDNSSEC'
              - 'ec2:UpdateSecurityGroupRuleDescriptionsIngress'
              - 'ec2:DescribeInternetGateways'
              - 'ec2:DescribeAvailabilityZones'
              - 'ec2:CreateInternetGateway'
              - 'ec2:RevokeSecurityGroupEgress'
              - 'ec2:CreateSecurityGroup'
              - 'rds:DescribeEngineDefaultClusterParameters'
              - 'ec2:ModifyVpcAttribute'
              - 'ec2:DeleteInternetGateway'
              - 'ec2:DescribeKeyPairs'
              - 'ec2:DescribeRouteTables'
              - 'ec2:AuthorizeSecurityGroupEgress'
              - 'ec2:UpdateSecurityGroupRuleDescriptionsEgress'
              - 'ec2:DescribeVpcClassicLinkDnsSupport'
              - 'ec2:CreateTags'
              - 'route53:ListHostedZones'
              - 'route53:ChangeTagsForResource'
              - 'route53:ChangeResourceRecordSets'
              - 'route53:GetChange'
              - 'route53:ListResourceRecordSets'
              - 'ec2:ModifySecurityGroupRules'
              - 'rds:DeleteDBInstanceAutomatedBackup'
              - 'route53:ListTagsForResource'
              - 'ec2:DescribeSecurityGroups'
              - 'ec2:DescribeVpcClassicLink'
              - 'ec2:RevokeSecurityGroupIngress'
              - 'ec2:DescribeVpcs'
              - 'ec2:DeleteSecurityGroup'
              - 'ec2:*'
              - 'ec2:DescribeSubnets'
              - 'ec2:DeleteKeyPair'
            Resource: '*'
          - Sid: VisualEditor3
            Effect: Allow
            Action:
              - 'iam:CreateInstanceProfile'
              - 'iam:UpdateAssumeRolePolicy'
              - 'iam:GetPolicyVersion'
              - 'iam:UntagRole'
              - 'iam:TagRole'
              - 'iam:RemoveRoleFromInstanceProfile'
              - 'iam:DeletePolicy'
              - 'iam:CreateRole'
              - 'iam:AttachRolePolicy'
              - 'iam:ListInstanceProfileTags'
              - 'iam:PutRolePolicy'
              - 'iam:AddRoleToInstanceProfile'
              - 'iam:ListInstanceProfilesForRole'
              - 'iam:PassRole'
              - 'iam:DetachRolePolicy'
              - 'iam:DeleteRolePolicy'
              - 'iam:ListAttachedRolePolicies'
              - 'iam:ListRolePolicies'
              - 'iam:CreatePolicyVersion'
              - 'iam:DeleteInstanceProfile'
              - 'iam:GetRole'
              - 'iam:GetInstanceProfile'
              - 'iam:GetPolicy'
              - 'iam:DeleteRole'
              - 'iam:ListInstanceProfiles'
              - 'iam:CreatePolicy'
              - 'iam:ListPolicyVersions'
              - 'iam:UntagInstanceProfile'
              - 'iam:GetRolePolicy'
              - 'iam:DeletePolicyVersion'
              - 'iam:TagInstanceProfile'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:instance-profile/*'
              - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/*'
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'
          - Sid: VisualEditor4
            Effect: Allow
            Action:
              - 'rds:StartDBCluster'
              - 'ec2:DeleteSubnet'
              - 'secretsmanager:DescribeSecret'
              - 'secretsmanager:PutSecretValue'
              - 'rds:DescribeGlobalClusters'
              - 'rds:ResetDBParameterGroup'
              - 'secretsmanager:DeleteSecret'
              - 'secretsmanager:UntagResource'
              - 'rds:CreateOptionGroup'
              - 'rds:CreateDBSubnetGroup'
              - 'rds:ModifyDBParameterGroup'
              - 'rds:ModifyDBInstance'
              - 'rds:ModifyDBClusterParameterGroup'
              - 'rds:ModifyDBClusterSnapshotAttribute'
              - 'rds:DeleteDBInstance'
              - 'rds:CreateDBClusterEndpoint'
              - 'rds:StopDBCluster'
              - 'rds:CreateDBParameterGroup'
              - 'rds:DeleteDBSnapshot'
              - 'rds:StartDBInstance'
              - 'rds:DeleteDBSubnetGroup'
              - 'rds:CreateDBSnapshot'
              - 'rds:DeleteDBSecurityGroup'
              - 'ec2:AssociateSubnetCidrBlock'
              - 'rds:ModifyDBCluster'
              - 'rds:CreateDBClusterSnapshot'
              - 'rds:DeleteDBParameterGroup'
              - 'rds:CreateDBClusterParameterGroup'
              - 'rds:ModifyDBSnapshotAttribute'
              - 'ec2:CreateSubnet'
              - 'rds:RemoveTagsFromResource'
              - 'rds:ModifyOptionGroup'
              - 'rds:DescribeDBSubnetGroups'
              - 'secretsmanager:CreateSecret'
              - 'secretsmanager:TagResource'
              - 'rds:DescribeDBParameterGroups'
              - 'logs:DeleteLogStream'
              - 'rds:DeleteOptionGroup'
              - 'secretsmanager:GetSecretValue'
              - 'rds:CreateDBInstance'
              - 'rds:DeleteDBClusterEndpoint'
              - 'rds:DescribeDBInstances'
              - 'rds:DescribeDBParameters'
              - 'rds:ModifyCurrentDBClusterCapacity'
              - 'rds:DeleteDBCluster'
              - 'rds:ResetDBClusterParameterGroup'
              - 'rds:AddTagsToResource'
              - 'rds:DescribeDBClusterParameters'
              - 'rds:StopDBInstance'
              - 'ec2:DisassociateSubnetCidrBlock'
              - 'secretsmanager:UpdateSecret'
              - 'rds:ModifyDBSnapshot'
              - 'rds:DeleteDBClusterSnapshot'
              - 'rds:ListTagsForResource'
              - 'rds:CreateDBSecurityGroup'
              - 'rds:CreateDBCluster'
              - 'rds:DeleteDBClusterParameterGroup'
              - 'rds:CreateDBInstanceReadReplica'
              - 'rds:DescribeDBClusters'
              - 'rds:DescribeDBClusterParameterGroups'
              - 'rds:ModifyDBSubnetGroup'
              - 'secretsmanager:UpdateSecretVersionStage'
            Resource:
              - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:target-group:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:cluster-pg:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:cev:*/*/*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:snapshot:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:cluster:*'
              - !Sub 'arn:aws:rds::${AWS::AccountId}:global-cluster:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:db-proxy-endpoint:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:es:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:db-proxy:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:cluster-snapshot:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:subgrp:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:ri:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:pg:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:cluster-endpoint:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:db:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:og:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:secgrp:*'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*'
              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*'
              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/*'

  SSMPermsForAutomatedDeployment:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: !Sub 'AutomatedDeploymentSSM-${ServiceName}-${EnvironmentName}'
      Path: /iac/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - 'ssm:PutParameter'
              - 'ssm:DeleteParameter'
              - 'ssm:RemoveTagsFromResource'
              - 'ssm:AddTagsToResource'
              - 'ssm:ListTagsForResource'
              - 'ssm:GetParametersByPath'
              - 'ssm:GetParameters'
              - 'ssm:GetParameter'
              - 'ssm:DeleteParameters'
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
          - Sid: VisualEditor1
            Effect: Allow
            Action: 'ssm:DescribeParameters'
            Resource: '*'

  InfraBotRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub 'Infra-Bot-${ServiceName}-${EnvironmentName}'
      Description: IAM role which has necessary permissions to create, modify and delete infrastructure via terraform
      Path: /iac/
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
            Condition: {}
      ManagedPolicyArns:
        - !Ref AccessToTerraformState
        - !Ref ECRPermsForLambdasEnvs
        - !Ref PermsForDeployingLambdas
        - !Ref PermsForAutomatedDeployment
        - !Ref SSMPermsForAutomatedDeployment
      # Tags: 
      #   - Purpose: Bot role with perms to create, modify, delete infra

  IAMGroupForIACUsers:
    Type: AWS::IAM::Group
    Properties: 
      GroupName: !Sub 'IaC-Users-${ServiceName}-${EnvironmentName}'
      Path: /iac/
      ManagedPolicyArns:
        - !Ref AssumeInfraBotRole
        - !Ref AccessToTerraformState
        - !Ref AccessToCommonSecrets
        - !Ref InvokeModifySGLambda
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonVPCReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonRoute53ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  SSMPermsForAutomatedDeploymentIAMPolicyARN:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub PermsSSMForAutomatedDeploymentIAMPolicyARN-${ServiceName}-${EnvironmentName}
      Type: String
      Value: !Ref SSMPermsForAutomatedDeployment
      Description: IAM policy ARN which gives SSM permissions required during automated deployment
  
  AccessToTerraformStateIAMPolicyARN:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub AccessToTerraformStateIAMPolicyARN-${ServiceName}-${EnvironmentName}
      Type: String
      Value: !Ref AccessToTerraformState
      Description: IAM policy ARN which gives access to terraform state bucket
  
  ECRPermsForLambdasEnvsIAMPolicyARN:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub ECRPermsForLambdasEnvsIAMPolicyARN-${ServiceName}-${EnvironmentName}
      Type: String
      Value: !Ref ECRPermsForLambdasEnvs
      Description: IAM policy ARN which gives ECR permissions required for deploying lambdas during automated deployment
  
  PermsForDeployingLambdasIAMPolicyARN:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub PermsForDeployingLambdasIAMPolicyARN-${ServiceName}-${EnvironmentName}
      Type: String
      Value: !Ref PermsForDeployingLambdas
      Description: IAM policy ARN which gives permissions to deploy lambdas during automated deployment
  
  PermsForAutomatedDeploymentIAMPolicyARN:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub PermsForAutomatedDeploymentIAMPolicyARN-${ServiceName}-${EnvironmentName}
      Type: String
      Value: !Ref PermsForAutomatedDeployment
      Description: IAM policy ARN which gives most permissions for automated deployment
  
  AssumeInfraBotRoleIAMPolicyARN:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub AssumeInfraBotRoleIAMPolicyARN-${ServiceName}-${EnvironmentName}
      Type: String
      Value: !Ref AssumeInfraBotRole 
      Description: IAM policy ARN which gives permissions to assume the infra bot role
  
  AccessToCommonSecretsIAMPolicyARN:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub AccessToCommonSecretsIAMPolicyARN-${ServiceName}-${EnvironmentName}
      Type: String
      Value: !Ref AccessToCommonSecrets
      Description: IAM policy ARN which gives permissions to access common secrets